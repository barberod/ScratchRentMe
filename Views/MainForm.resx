<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFYEIgBWBCIFVgQhPlYEIQ5WBCEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVgQhAFYEIQ5WBCE/VgQiBVYEIgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVgQhAFYEIRFWBCGxVgQhLFYEIQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWBCEAVgQhLFYEIbJWBCERVgQhAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwADQBIAAMBVAMdGVYEIbpVAx80RwAEBE0A
        DwdNAA8HTQAPB00ADwdNAA8HTQAPB00ADwdNAA8HTQAPB00ADwdNAA8HTQAPB0cABARVAx80VgQhulQD
        HRlIAAMBTAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFcFIgBcDCwBVAEcQVcFI59bCiu9Wgkp61sK
        K8VbCiy3WwosuFsKLLhbCiy4WwosuFsKLLhbCiy4WwosuFsKLLhbCiy4WwosuFsKLLhbCiy4Wwost1sK
        K8VaCSnrWworvVcFI55UARxBXAwsAVcFIgAAAAAAAAAAAAAAAABXBSIAVgQhAFQBHEFlFj/lkEuY/6Be
        uP+gX7r/oF64/6BeuP+gXrj/oF64/6BeuP+gXrj/oF64/6BeuP+gXrj/oF64/6BeuP+gXrj/oF64/6Be
        uP+gXrj/oF64/6Bfuv+gXrj/kEuY/2QWPuRUARxBVgQhAFcFIgAAAAAAAAAAAFcEIgBJAAUBVwUjnpFM
        mf+8gfP/u4Dx/7uA8f+7gPH/u4Dx/7uA8f+7gPH/u4Dx/7uA8f+7gPH/u4Dx/7uA8f+7gPH/u4Dx/7uA
        8f+7gPH/u4Dx/7uA8f+7gPH/u4Dx/7uA8f+8gfP/kEuZ/1cFI55JAAUBVwQiAAAAAAAAAAAAVgQhAE0A
        DwdbCiu3oF64/7uA8f+6fu7/un7u/7p+7v+6fu7/un7u/7p+7v+6fu7/un7u/7p+7v+6fu7/un7u/7p+
        7v+6fu7/un7u/7p+7v+6fu7/un7u/7p+7v+6fu7/un7u/7uA8f+gXrj/Wwort00ADwdWBCEAAAAAAAAA
        AABWBCEASwAOB1wMLLina7r/voTx/7p+7v+6fe7/un7u/7p+7v+6fu7/un7u/7p+7v+6fu7/un7u/7p+
        7v+6fu7/un7u/7p+7v+6fu7/un7u/7p+7v+6fu7/un7u/7p97v+6fu7/voTx/6druv9cDCy4SwAOB1YE
        IQAAAAAAWAYkAFIAGQBSABgaWQglx6x3tP/PpPb/xpXx/8GL7/+9g+//u3/u/7p+7v+6fe7/un3u/7p+
        7v+6fu7/un7u/7p+7v+6fu7/un7u/7p97v+6fe7/un7u/7t/7v+9g+//wYvv/8aV8f/PpPb/rHe0/1gI
        JcZSABgaUgAZAFgGJABVAh4AVAEcJlwLLLpnGEP8hEJv/8me5P/TrPb/0qr2/8+k8//LnfL/x5Xx/8OP
        8P/Aie//voXv/72D7v+8ge7/vIHu/72D7v++he//wInv/8OP8P/GlfH/yp3y/8+k8//Sqvb/06z2/8me
        5P+EQm//ZxhD/FwKLLpUARwmVQIeAFIAGQtYByaoiUKJ/65v1P97MWz/dy9a/5VZjP+ygL7/x5vh/9Co
        8f/TrPb/06z2/9Kp9f/Qp/T/zqTz/82i8//NovP/zqTz/9Cn9P/SqfX/06z2/9Os9v/QqPH/x5vh/7KA
        vv+VWYz/dy9a/3sxbP+ub9T/iUKJ/1gHJqdSABkLUQAWQW0gUO6zdd//u4Dx/7V45P+eW7T/hT2B/3Qp
        XP9wJ0//gD1p/5dbj/+pdK7/uIfH/8KV2f/IneP/zKPq/8yj6v/IneP/wpXZ/7iHx/+pdK7/l1uP/4A9
        af9wJ0//dClc/4U9gf+eW7X/tXjk/7uA8f+zdd//bSBQ7VEAFkBRABdogjxy/L2E7/+6fe7/un7v/7uA
        8f+6fvD/t33k/302af95Lmr/hj+E/3owaf90KVz/cypY/3YuWv95M1//eTNf/3YtWv9zKlj/dClc/3ow
        af+GP4T/eS5q/302af+3feT/un7w/7uA8f+6fu//un3u/72E7/+CPHL8UQAXZ1AAFld9OWT3yZvu/8CK
        8P+8gu7/vILu/8GK8P/JnO//gDxp/5pXrf+9gfP/uXzr/7R34v+ub9X/qGjK/6Jhvv+iYb7/qGjK/65v
        1f+0d+L/uXzr/72B8/+aV63/gDxp/8mc7//BivD/vILu/7yC7v/AivD/yZvu/305ZPdQABZWUAAXIGIV
        NtKzgb//06r3/86j8//OpPP/06v3/7SCwP9xJlX/rm/W/7t/7/+6fu7/un7v/7t/8P+7f/D/u4Dx/7uA
        8f+7f/D/u3/w/7p+7/+6fu7/u3/v/65v1v9xJlX/tILA/9Or9//OpPP/zqPz/9Oq9/+ygL7/YhQ20lAA
        FyBTABsAVAEdXm0jSe+pc67/xZrf/8Wa3/+pdK//cytV/5RQof+7f+//un7u/7p+7v+6fe7/un3u/7p+
        7v+6fu7/un7u/7p+7v+6fe7/un3u/7p+7v+6fu7/u3/v/5RQof9zK1X/qXSv/8Wa3//Fmt//qXOu/20j
        Se9UAR1dUwAaAFYEIQBXBCMEUwAbT1wMK7pqH0T3cilU/3UrX/+ZVqv/uX3s/7p+7v+6fu7/vIPu/8GL
        8P/GlPP/yJjy/8ma8f/JmvH/yJjy/8aU8//Bi/D/vIPu/7p+7v+6fu7/uX3s/5lWq/91K1//cilU/2of
        RPhcDCu7UwAbT1cFIwRWBCEAAAAAAFIAHABVAx4ATwAUHF4NMdadWrL/tnnm/7t/8P+6f+7/v4jv/8eX
        8f/Oo/P/yZ3m/6Rtp//Jn+X/0633/9Ot9//Jn+X/pW6n/8me5v/Oo/P/x5fx/7+I7/+6f+7/u3/w/7Z5
        5v+fXbj/YBA23k8AFCNVAh8AUgAcAAAAAAAAAAAAAAAAAFYEIQBOABEfZxhD4LBy2f+7f/D/vYPv/8eX
        8f/PpvP/0arz/9Gq9P/Loen/hEJw/4hHdv+zgL//s4C//4hHdv+EQnD/y6Hp/9Gq9P/RqvP/z6bz/8eW
        8f+9g+//u37v/7N13/9qHUvoTwASKVYEIQAAAAAAAAAAAAAAAAAAAAAAVgQhAE8AEiNoGkbksXLb/8CK
        8P/MoPL/0arz/9Gp8//RqfP/0anz/9Kq9P/GmuD/dS1V/24kSv9uJEr/dS1V/8aa4P/SqvT/0anz/9Gp
        8//RqfP/0arz/8yg8v/AifD/s3Xf/2seTepPABMrVgQhAAAAAAAAAAAAAAAAAAAAAABWBCEATgARGmQV
        Ptu0e9X/z6X0/9Gq8//RqfP/0anz/9Gp8//RqfP/0anz/9Cn8f9/O2f/pG2n/6Rtpv9/O2f/0Kfx/9Gp
        8//RqfP/0anz/9Gp8//RqfP/0arz/8+l9P+3f9v/aBlF408AEiJWBCEAAAAAAAAAAAAAAAAAAAAAAFYE
        IQBOABIMXg8wwrOBwv/Tq/b/0anz/9Gp8//RqfP/0anz/9Gp8//SqvT/yZ7l/3cwWf9vJk3/byZM/3cw
        Wf/JnuX/0qr0/9Gp8//RqfP/0anz/9Gp8//RqfP/0qv1/7eHyv9hEjXMTgASEVYEIQAAAAAAAAAAAAAA
        AAAAAAAAVgQiAHg1XQBWBCGUnGKZ/9Or9v/RqfP/0anz/9Gp8//RqfP/0an0/8yi6/+JSHj/g0Bt/655
        tv+uebb/g0Bt/4lIeP/Mouv/0an0/9Gp8//RqfP/0anz/9Gp8//TrPb/oWmh/1cGI51GAAcBVwUiAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVgQhAFAAF016NF73zKLq/9Gp9P/RqfP/0anz/9Gp8//SqvT/yJ7l/59m
        nf/GmuD/06z3/9Os9//GmuD/n2ad/8ie5f/SqvT/0anz/9Gp8//RqfP/0anz/86l7f9+OmX6UQAYWFYE
        IQBaBSYAAAAAAAAAAAAAAAAAAAAAAAAAAABWBCEAUQAYEl0NLcCrdrL/06z2/9Gp8//RqfP/0anz/9Gp
        8//RqfP/0qv1/9Kq9P/RqfP/0anz/9Kq9P/Sq/X/0anz/9Gp8//RqfP/0anz/9Gp8//Tq/b/sH27/2AR
        McpQABcWVgQhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFYEIQBVAh8AUgAaVXUtVfTGmt//0qr1/9Gp
        8//RqfP/0anz/9Gp8//RqfP/0anz/9Gp8//RqfP/0anz/9Gp8//RqfP/0anz/9Gp8//RqfP/0qr0/8me
        5f95M134UgAaYFQCHgBXBSMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFcFIgBUAR0HVgQglIlI
        eP/Mo+v/0qr1/9Gp8//RqfP/0anz/9Gp8//RqfP/0anz/9Gp8//RqfP/0anz/9Gp8//RqfP/0anz/9Kq
        9P/Ope7/jk+A/1cFI6BTABwLVgQhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFUD
        IABTABsXWQgmroxMff/JnuX/06v2/9Gp8//RqfP/0anz/9Gp8//RqfP/0anz/9Gp8//RqfP/0anz/9Gp
        8//Tq/b/y6Ho/49Rg/9aCii3UgAaHFQCHgBYCSUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVwUiAFQBHQBTABsbVwYjoXw3Yvq2hMT/0Kjy/9Os9v/SqvT/0anz/9Gp8//RqfP/0anz/9Kq
        9P/TrPb/0anz/7iIyf9/Omb6WAclqFIAGh1TABwAVwUiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFMBHABTARwNUwEca2MVN9eISHf+sHy6/8aa4P/Ope7/0anz/9Gp
        8//Ope7/xprg/7B9u/+LSnv+ZRg63VMBHHJSABsOUgAaAFsFJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFUBHQBfBCwAUAAYIVMBG3JdDi29bSNJ5nw3
        YvaEQnD7hUNx+3w3YvZtI0jlXQ4uvlMBHHdQABglVwIiAVQBHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQABYAVgAhAE8A
        FA1OABMvTwAVUFAAF2RQABdkTwAVUE4AEy5PABUOVQAqAE8AFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/H/+P/x//j/4AAAf4AAAB+AAAAfAAAADwAAAA8AAAAPAAAADgAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAHgAAAH4AAAB+AAAAfgAAAH4AAAB/AAAAfwAAAP8AAAD/gA
        AB/4AAAf/AAAP/4AAH//AAD//8AB///wD/8=
</value>
  </data>
</root>